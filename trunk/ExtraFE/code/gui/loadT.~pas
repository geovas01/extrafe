unit loadT;

interface

  procedure main_menu(aTime: Double);
  procedure Progress_Bar_Intro(Progresspercent: real);

implementation
uses
  main,Controls,Windows, forms,SysUtils,
  GLmaterial, GLTexture, GLKeyboard, GLHUDObjects,
  bass,uLoadImage;


procedure main_menu(aTime: Double);
var
  i: integer;
begin
  MainForm.Background_intro.Height := MainForm.GLSceneViewer.Height;
  MainForm.Background_intro.Width := MainForm.GLSceneViewer.Width;
  MainForm.Background_intro.Position.X := MainForm.GLSceneViewer.Width div 2;
  MainForm.Background_intro.Position.Y := MainForm.GLSceneViewer.Height div 2;

  for i := 0 to 100 do
    begin
      Progress_Bar_Intro(i);
      Sleep(30);
    end;
end;

procedure ProgresS_Bar_intro(Progresspercent: real);
var
  NMaskWidth: Single;
begin
  with MainForm do
  begin
    if MatLib=nil then
      MatLib := TGLMaterialLibrary.Create(MainForm);

    if Progresspercent < 100 then
    begin
      if Progress.Tag <> 1 then
      begin
        AddMaterial(MatLib, 'media\extrafe\intro\progress.png', 'Progress');
        Progress.Material.Assign(MatLib.Materials.GetLibMaterialByName('Progress').Material);
        Progress.Height := 57;
        Progress.Width := 488;
        Progress.Position.X := (GLSceneViewer.Width div 2) - 20;
        Progress.Position.y := (GLSceneViewer.Height div 2) + 30;
        Progress.Tag := 1;

        AddMaterial(MatLib, 'media\extrafe\intro\mask.png', 'Mask');
        mask.Material.Assign(MatLib.Materials.GetLibMaterialByName('Mask').Material);
      end;

      if Bar.Tag <> 1 then
      begin
        AddMaterial(MatLib, 'media\extrafe\intro\bar.png', 'bar');
        bar.Material.Assign(MatLib.Materials.GetLibMaterialByName('bar').Material);
        Bar.Height := 57;
        Bar.Width := 488;
        Bar.Position.X := (GLSceneViewer.Width div 2) - 20;
        Bar.Position.y := (GLSceneViewer.Height div 2) + 30;
        Bar.Tag := 1;
      end;
      mask.Width := (Bar.Width - 16);
      mask.Height := (Bar.Height - 12);
      mask.Position := Bar.Position;

      mask.Position.X := mask.Position.X + ((mask.Width / 100 * Progresspercent)/2);
      NMaskWidth:=mask.Width - mask.Width / 100 * Progresspercent;
      mask.Width:=NMaskWidth;
      Progress_Bar.Visible := true;
      Application.ProcessMessages;
    end
    else
      Progress_Bar.Visible := false;
  end
end;


end.
